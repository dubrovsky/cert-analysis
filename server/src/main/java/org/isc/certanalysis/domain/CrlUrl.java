package org.isc.certanalysis.domain;
// Generated Jan 25, 2019 9:50:29 AM by Hibernate Tools 4.3.5.Final

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.time.Instant;

/**
 * CrlUrl generated by hbm2java
 */
@Entity
@Table(name = "CRL_URL", schema = "CERT_REP3")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class CrlUrl extends AbstractAuditingEntity {

	private long id;
	private Scheme scheme;
	private String url;

	public CrlUrl() {
		super();
	}

	public CrlUrl(long id, Scheme scheme, String url, String createdBy,
	              Instant createdDate, String lastModifiedBy, Instant lastModifiedDate) {
		super(createdBy, createdDate, lastModifiedBy, lastModifiedDate);
		this.id = id;
		this.scheme = scheme;
		this.url = url;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "CRL_URL_SEQ")
	@SequenceGenerator(sequenceName = "SEQ_CRL_URL", name = "CRL_URL_SEQ")
	@Column(name = "ID", unique = true, nullable = false, precision = 16, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SCHEME_ID", nullable = false)
	public Scheme getScheme() {
		return this.scheme;
	}

	public void setScheme(Scheme scheme) {
		this.scheme = scheme;
	}

	@Column(name = "URL", nullable = false, length = 128)
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Override
	public int hashCode() {
		return 31;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof CrlUrl)) return false;
		return getId() != null && getId().equals(((CrlUrl) o).getId());
	}

}
