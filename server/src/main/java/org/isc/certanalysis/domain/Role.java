package org.isc.certanalysis.domain;
// Generated Jan 25, 2019 9:50:29 AM by Hibernate Tools 4.3.5.Final

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

/**
 * Role generated by hbm2java
 */
@Entity
@Table(name = "ROLE", schema = "CERT_REP3")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Role implements java.io.Serializable {

	private long id;
	private String name;

	private Set<User> users = new HashSet<User>(0);

	private Set<Privilege> privileges = new HashSet<Privilege>(0);

	public Role() {
	}

	public Role(long id, String name) {
		this.id = id;
		this.name = name;
	}

	public Role(long id, String name, Set<User> userses, Set<Privilege> privileges) {
		this.id = id;
		this.name = name;
		this.users = userses;
		this.privileges = privileges;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 16, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "NAME", nullable = false, length = 24)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "roles")
	@JsonIgnore
	/*@JoinTable(name = "USERS_ROLE", schema = "CERT_REP3", joinColumns = {
			@JoinColumn(name = "ROLE_ID", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "USER_ID", nullable = false, updatable = false) })*/
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = {
			CascadeType.PERSIST,
			CascadeType.MERGE
	})
	@JoinTable(name = "ROLE_PRIVILEGE", schema = "CERT_REP3", joinColumns = {
			@JoinColumn(name = "ROLE_ID", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "PRIVILEGE_ID", nullable = false, updatable = false) })
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	@JsonIgnore
	public Set<Privilege> getPrivileges() {
		return this.privileges;
	}

	public void setPrivileges(Set<Privilege> privileges) {
		this.privileges = privileges;
	}

	public void addPrivilege(Privilege privilege) {
		privileges.add(privilege);
		privilege.getRoles().add(this);
	}

	public void removePrivilege(Privilege privilege) {
		privileges.remove(privilege);
		privilege.getRoles().remove(this);
	}

	public void removePrivileges() {
		for(Privilege privilege : new ArrayList<>(privileges)) {
			removePrivilege(privilege);
		}
	}

}
