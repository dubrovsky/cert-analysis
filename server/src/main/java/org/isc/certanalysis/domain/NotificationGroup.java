package org.isc.certanalysis.domain;
// Generated Jan 25, 2019 9:50:29 AM by Hibernate Tools 4.3.5.Final

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.time.Instant;
import java.util.HashSet;
import java.util.Set;

/**
 * NotificationGroup generated by hbm2java
 */
@Entity
@Table(name = "NOTIFICATION_GROUP", schema = "CERT_REP3")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class NotificationGroup extends AbstractAuditingEntity {

    private Long id;
    private String name;
    private Set<File> files = new HashSet<>(0);
    private Set<User> users = new HashSet<>(0);
    private Set<Scheme> schemes = new HashSet<>(0);

    public NotificationGroup() {
        super();
    }

    public NotificationGroup(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    public NotificationGroup(Long id, String name, String createdBy, Instant createdDate, String lastModifiedBy,
                             Instant lastModifiedDate) {
        super(createdBy, createdDate, lastModifiedBy, lastModifiedDate);
        this.id = id;
        this.name = name;
    }

    public NotificationGroup(Long id, String name, String createdBy, Instant createdDate, String lastModifiedBy,
                             Instant lastModifiedDate, Set<File> files, Set<User> users, Set<Scheme> schemes) {
        super(createdBy, createdDate, lastModifiedBy, lastModifiedDate);
        this.id = id;
        this.name = name;
        this.files = files;
        this.users = users;
        this.schemes = schemes;
    }

    public NotificationGroup(Long id) {
        this.id = id;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "NOTIFICATION_GROUP_SEQ")
    @SequenceGenerator(sequenceName = "SEQ_NOTIFICATION_GROUP", name = "NOTIFICATION_GROUP_SEQ", allocationSize = 1)
    @Column(name = "ID", unique = true, nullable = false, precision = 16, scale = 0)
    public Long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Column(name = "NAME", nullable = false, length = 48)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "notificationGroups")
    public Set<User> getUsers() {
        return this.users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NotificationGroup)) return false;
        return getId() != null && getId().equals(((NotificationGroup) o).getId());
    }

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "notificationGroups")
    public Set<File> getFiles() {
        return files;
    }

    public void setFiles(Set<File> files) {
        this.files = files;
    }

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "notificationGroups")
    public Set<Scheme> getSchemes() {
        return schemes;
    }

    public void setSchemes(Set<Scheme> schemes) {
        this.schemes = schemes;
    }
}
